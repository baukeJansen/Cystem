@using Microsoft.AspNetCore.Html
@using Website.Common.Data
@using Website.Common.Extensions
@using Website.Controllers.Cystem
@using Website.Common.Viewmodels
@using Website.Common.Models
@using ValueType = Website.Common.Enums.ValueType
@model ValueViewModel

@functions {
    IHtmlContent CreateTab(string name, ValueType type)
    {
        TagBuilder li = new TagBuilder("li");
        TagBuilder a = new TagBuilder("a");
        TagBuilder input = new TagBuilder("input");

        li.AddCssClass("tab col");
        //if (Model.Type != ValueType.None && Model.Type != type)
        //    li.AddCssClass("disabled");

        a.MergeAttribute("href", "#" + type.ToString());
        if (Model.Type == type)
            a.AddCssClass("active");

        input.AddCssClass("hide");
        input.MergeAttribute("type", "radio");
        input.MergeAttribute("name", "Type");
        input.MergeAttribute("value", type.ToString());
        if (Model.Type == type)
            input.MergeAttribute("checked", "checked");

        a.InnerHtml.AppendHtml(input);
        a.InnerHtml.Append(name);

        li.InnerHtml.AppendHtml(a);

        return li.Render();
    }
}

<div class="container">
    <div class="row">
        <div class="col s12">
            <h1>Value</h1>
        </div>
    </div>
    @using (Html.BeginForm<ValueController>(c => c.Store(Param<ValueViewModel>.Any), new { }, FormMethod.Post, true, new { }))
    {
        @Html.HiddenFor(m => m.Id)

        /*<div class="row">
            <div class="col s12">
                @if (Model.Type == ValueType.None)
                {
                    @Html.DropDownListFor(m => m.Type, Model.Types)
                }
                else
                {
                    @Html.DropDownListFor(m => m.Type, Model.Types, new { @disabled = "disabled" })
                }
            </div>
        </div>*/

        <div class="row">
            <div class="col s12">
                <ul class="tabs formtab">
                    @foreach (ValueType type in Enum.GetValues(ValueType.None.GetType()))
                    {
                        @CreateTab(type.Name(), type);
                    }
                </ul>

            </div>
        </div>

        <div class="row">
            <div id="@ValueType.None" class="col s12 input-field">
            </div>

            <div id="@ValueType.StringValue" class="col s12 input-field">
                @Html.EditorFor(m => m.String)
                @Html.LabelFor(m => m.String)
            </div>

            <div id="@ValueType.SerializedStringValue" class="col s12 input-field">
                @Html.EditorFor(m => m.SerializedString)
                @Html.LabelFor(m => m.SerializedString)
            </div>

            <div id="@ValueType.IntValue" class="col s12 input-field">
                @Html.EditorFor(m => m.Int)
                @Html.LabelFor(m => m.Int)
            </div>

            <div id="@ValueType.GroupValue" class="col s12 input-field">
            </div>

            <div id="@ValueType.RelatedValue" class="col s12 input-field">
                @Html.EditorFor(m => m.Int)
                @Html.LabelFor(m => m.Int)
            </div>

            <div id="@ValueType.RelatedAttribute" class="col s12 input-field">
                @Html.EditorFor(m => m.Int)
                @Html.LabelFor(m => m.Int)
            </div>

            <div id="@ValueType.ParamValue" class="col s12 input-field">
            </div>

            <div id="@ValueType.DateValue" class="col s12 input-field">
                @Html.EditorFor(m => m.DateTime)
                @Html.LabelFor(m => m.DateTime)
            </div>
        </div>

        <div class="row">
            <div class="col s12 input-field ">
                @Html.EditorFor(m => m.GroupId)
                @Html.LabelFor(m => m.GroupId)
            </div>
        </div>

        <div class="row">
            <div class="col s12 input-field ">
                @Html.EditorFor(m => m.ParentId)
                @Html.LabelFor(m => m.ParentId)
            </div>
        </div>

        <div class="row">
            <div class="col s12 input-field ">
                @Html.EditorFor(m => m.Order)
                @Html.LabelFor(m => m.Order)
            </div>
        </div>

        <div class="row button-row">
            <div class="col s12 input-field ">
                @if (Model.Id == 0)
                {
                    @await Render.SubmitButton("Create", "add")
                }
                else
                {
                    @await Render.DeleteModalButton(new Value { Id = Model.Id }, htmlAttributes: new { @class = "btn-outline" })
                    @await Render.SubmitButton("Update")
                }
            </div>
        </div>
    }
</div>