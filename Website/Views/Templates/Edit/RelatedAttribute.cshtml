@using Website.Common.Viewmodels
@using Website.Common.Models
@using Website.Common.Enums
@using ValueType = Website.Common.Enums.ValueType
@model GenericViewModel
@inject IValueHelper Value

<div class="input-field col s12">
    @{
        Group group = Model.Value.RelatedGroup;
        Value source = Model.Value.RelatedValue;

        if (source != null)
        {
            Model.Value.Int = source.Int;
            Model.Value.String = source.String;
            Model.Value.SerializedString = source.SerializedString;
            Model.Value.DateTime = source.DateTime;
        }
        else
        {
            Model.Value.Int = null;
        }

        Value settings = Value.Get(Model, "Settings");
    }

    @if (settings != null)
    {
        @if (source != null)
        {
            @Html.Hidden(settings.String + ".Id", Model.Value.RelatedValue.Id)
            if (source.ParentId.HasValue)
            {
                @Html.Hidden(settings.String + ".ParentId", source.ParentId.Value)
            }
        }

        @Html.Hidden(settings.String + ".GroupId", group.Id)
        @Html.Hidden(settings.String + ".Type", group.Type)


        @switch (group.Type)
        {
            case ValueType.IntValue:
                @Html.TextBox(settings.String + ".Int", source != null ? source.Int : null, new { @type = "number" })
                @Html.Label(settings.String + ".Int", group.Label)
                break;

            case ValueType.StringValue:
                @Html.TextBox(settings.String + ".String", source != null ? source.String : null)
                @Html.Label(settings.String + ".String", group.Label)
                break;

            case ValueType.SerializedStringValue:
                @Html.TextBox(settings.String + ".SerializedString", source != null ? source.SerializedString : null)
                @Html.Label(settings.String + ".SerializedString", group.Label)
                break;

            case ValueType.DateValue:
                DateTime time = source == null ? DateTime.Now : source.DateTime.HasValue ? source.DateTime.Value : DateTime.Now;
                @Html.TextBox(settings.String + ".Time", time.ToString("dd-MM-yyyy"), new { @class = "datepicker" })
                @Html.Label(settings.String + ".Time", group.Label)
                break;
        }
    }
</div>